{"id":"node_modules/@tensorflow/tfjs-data/dist/readers.js","dependencies":[{"name":"/Users/zhangyanhua/Desktop/test/js-tensorFlow/package.json","includedInParent":true,"mtime":1703412791966},{"name":"/Users/zhangyanhua/Desktop/test/js-tensorFlow/node_modules/@tensorflow/tfjs-data/package.json","includedInParent":true,"mtime":1703260297661},{"name":"./dataset","loc":{"line":18,"column":38,"index":744},"parent":"/Users/zhangyanhua/Desktop/test/js-tensorFlow/node_modules/@tensorflow/tfjs-data/dist/readers.js","resolved":"/Users/zhangyanhua/Desktop/test/js-tensorFlow/node_modules/@tensorflow/tfjs-data/dist/dataset.js"},{"name":"./datasets/csv_dataset","loc":{"line":19,"column":27,"index":784},"parent":"/Users/zhangyanhua/Desktop/test/js-tensorFlow/node_modules/@tensorflow/tfjs-data/dist/readers.js","resolved":"/Users/zhangyanhua/Desktop/test/js-tensorFlow/node_modules/@tensorflow/tfjs-data/dist/datasets/csv_dataset.js"},{"name":"./iterators/lazy_iterator","loc":{"line":20,"column":37,"index":847},"parent":"/Users/zhangyanhua/Desktop/test/js-tensorFlow/node_modules/@tensorflow/tfjs-data/dist/readers.js","resolved":"/Users/zhangyanhua/Desktop/test/js-tensorFlow/node_modules/@tensorflow/tfjs-data/dist/iterators/lazy_iterator.js"},{"name":"./iterators/microphone_iterator","loc":{"line":21,"column":35,"index":911},"parent":"/Users/zhangyanhua/Desktop/test/js-tensorFlow/node_modules/@tensorflow/tfjs-data/dist/readers.js","resolved":"/Users/zhangyanhua/Desktop/test/js-tensorFlow/node_modules/@tensorflow/tfjs-data/dist/iterators/microphone_iterator.js"},{"name":"./iterators/webcam_iterator","loc":{"line":22,"column":31,"index":977},"parent":"/Users/zhangyanhua/Desktop/test/js-tensorFlow/node_modules/@tensorflow/tfjs-data/dist/readers.js","resolved":"/Users/zhangyanhua/Desktop/test/js-tensorFlow/node_modules/@tensorflow/tfjs-data/dist/iterators/webcam_iterator.js"},{"name":"./sources/url_data_source","loc":{"line":23,"column":30,"index":1038},"parent":"/Users/zhangyanhua/Desktop/test/js-tensorFlow/node_modules/@tensorflow/tfjs-data/dist/readers.js","resolved":"/Users/zhangyanhua/Desktop/test/js-tensorFlow/node_modules/@tensorflow/tfjs-data/dist/sources/url_data_source.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.csv = csv;\nexports.func = func;\nexports.generator = generator;\nexports.microphone = microphone;\nexports.webcam = webcam;\nvar _dataset = require(\"./dataset\");\nvar _csv_dataset = require(\"./datasets/csv_dataset\");\nvar _lazy_iterator = require(\"./iterators/lazy_iterator\");\nvar _microphone_iterator = require(\"./iterators/microphone_iterator\");\nvar _webcam_iterator = require(\"./iterators/webcam_iterator\");\nvar _url_data_source = require(\"./sources/url_data_source\");\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\n/**\n * Create a `CSVDataset` by reading and decoding CSV file(s) from provided URL\n * or local path if it's in Node environment.\n *\n * Note: If isLabel in columnConfigs is `true` for at least one column, the\n * element in returned `CSVDataset` will be an object of\n * `{xs:features, ys:labels}`: xs is a dict of features key/value pairs, ys\n * is a dict of labels key/value pairs. If no column is marked as label,\n * returns a dict of features only.\n *\n * ```js\n * const csvUrl =\n * 'https://storage.googleapis.com/tfjs-examples/multivariate-linear-regression/data/boston-housing-train.csv';\n *\n * async function run() {\n *   // We want to predict the column \"medv\", which represents a median value of\n *   // a home (in $1000s), so we mark it as a label.\n *   const csvDataset = tf.data.csv(\n *     csvUrl, {\n *       columnConfigs: {\n *         medv: {\n *           isLabel: true\n *         }\n *       }\n *     });\n *\n *   // Number of features is the number of column names minus one for the label\n *   // column.\n *   const numOfFeatures = (await csvDataset.columnNames()).length - 1;\n *\n *   // Prepare the Dataset for training.\n *   const flattenedDataset =\n *     csvDataset\n *     .map(({xs, ys}) =>\n *       {\n *         // Convert xs(features) and ys(labels) from object form (keyed by\n *         // column name) to array form.\n *         return {xs:Object.values(xs), ys:Object.values(ys)};\n *       })\n *     .batch(10);\n *\n *   // Define the model.\n *   const model = tf.sequential();\n *   model.add(tf.layers.dense({\n *     inputShape: [numOfFeatures],\n *     units: 1\n *   }));\n *   model.compile({\n *     optimizer: tf.train.sgd(0.000001),\n *     loss: 'meanSquaredError'\n *   });\n *\n *   // Fit the model using the prepared Dataset\n *   return model.fitDataset(flattenedDataset, {\n *     epochs: 10,\n *     callbacks: {\n *       onEpochEnd: async (epoch, logs) => {\n *         console.log(epoch + ':' + logs.loss);\n *       }\n *     }\n *   });\n * }\n *\n * await run();\n * ```\n *\n * @param source URL or local path to get CSV file. If it's a local path, it\n * must have prefix `file://` and it only works in node environment.\n * @param csvConfig (Optional) A CSVConfig object that contains configurations\n *     of reading and decoding from CSV file(s).\n *\n * @doc {\n *   heading: 'Data',\n *   subheading: 'Creation',\n *   namespace: 'data',\n *   configParamIndices: [1]\n *  }\n */\nfunction csv(source, csvConfig = {}) {\n  return new _csv_dataset.CSVDataset(new _url_data_source.URLDataSource(source), csvConfig);\n}\n/**\n * Create a `Dataset` that produces each element by calling a provided function.\n *\n * Note that repeated iterations over this `Dataset` may produce different\n * results, because the function will be called anew for each element of each\n * iteration.\n *\n * Also, beware that the sequence of calls to this function may be out of order\n * in time with respect to the logical order of the Dataset. This is due to the\n * asynchronous lazy nature of stream processing, and depends on downstream\n * transformations (e.g. .shuffle()). If the provided function is pure, this is\n * no problem, but if it is a closure over a mutable state (e.g., a traversal\n * pointer), then the order of the produced elements may be scrambled.\n *\n * ```js\n * let i = -1;\n * const func = () =>\n *    ++i < 5 ? {value: i, done: false} : {value: null, done: true};\n * const ds = tf.data.func(func);\n * await ds.forEachAsync(e => console.log(e));\n * ```\n *\n * @param f A function that produces one data element on each call.\n */\nfunction func(f) {\n  const iter = (0, _lazy_iterator.iteratorFromFunction)(f);\n  return (0, _dataset.datasetFromIteratorFn)(async () => iter);\n}\n/**\n * Create a `Dataset` that produces each element from provided JavaScript\n * generator, which is a function*\n * (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Generator_functions),\n * or a function that returns an\n * iterator\n * (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Generator_functions).\n *\n * The returned iterator should have `.next()` function that returns element in\n * format of `{value: TensorContainer, done:boolean}`.\n *\n * Example of creating a dataset from an iterator factory:\n * ```js\n * function makeIterator() {\n *   const numElements = 10;\n *   let index = 0;\n *\n *   const iterator = {\n *     next: () => {\n *       let result;\n *       if (index < numElements) {\n *         result = {value: index, done: false};\n *         index++;\n *         return result;\n *       }\n *       return {value: index, done: true};\n *     }\n *   };\n *   return iterator;\n * }\n * const ds = tf.data.generator(makeIterator);\n * await ds.forEachAsync(e => console.log(e));\n * ```\n *\n * Example of creating a dataset from a generator:\n * ```js\n * function* dataGenerator() {\n *   const numElements = 10;\n *   let index = 0;\n *   while (index < numElements) {\n *     const x = index;\n *     index++;\n *     yield x;\n *   }\n * }\n *\n * const ds = tf.data.generator(dataGenerator);\n * await ds.forEachAsync(e => console.log(e));\n * ```\n *\n * @param generator A JavaScript generator function that returns a JavaScript\n *     iterator.\n *\n * @doc {\n *   heading: 'Data',\n *   subheading: 'Creation',\n *   namespace: 'data',\n *   configParamIndices: [1]\n *  }\n */\nfunction generator(generator) {\n  return (0, _dataset.datasetFromIteratorFn)(async () => {\n    const gen = await generator();\n    return (0, _lazy_iterator.iteratorFromFunction)(() => gen.next());\n  });\n}\n/**\n * Create an iterator that generates `Tensor`s from webcam video stream. This\n * API only works in Browser environment when the device has webcam.\n *\n * Note: this code snippet only works when the device has a webcam. It will\n * request permission to open the webcam when running.\n * ```js\n * const videoElement = document.createElement('video');\n * videoElement.width = 100;\n * videoElement.height = 100;\n * const cam = await tf.data.webcam(videoElement);\n * const img = await cam.capture();\n * img.print();\n * cam.stop();\n * ```\n *\n * @param webcamVideoElement A `HTMLVideoElement` used to play video from\n *     webcam. If this element is not provided, a hidden `HTMLVideoElement` will\n *     be created. In that case, `resizeWidth` and `resizeHeight` must be\n *     provided to set the generated tensor shape.\n * @param webcamConfig A `WebcamConfig` object that contains configurations of\n *     reading and manipulating data from webcam video stream.\n *\n * @doc {\n *   heading: 'Data',\n *   subheading: 'Creation',\n *   namespace: 'data',\n *   ignoreCI: true\n *  }\n */\nasync function webcam(webcamVideoElement, webcamConfig) {\n  return _webcam_iterator.WebcamIterator.create(webcamVideoElement, webcamConfig);\n}\n/**\n * Create an iterator that generates frequency-domain spectrogram `Tensor`s from\n * microphone audio stream with browser's native FFT. This API only works in\n * browser environment when the device has microphone.\n *\n * Note: this code snippet only works when the device has a microphone. It will\n * request permission to open the microphone when running.\n * ```js\n * const mic = await tf.data.microphone({\n *   fftSize: 1024,\n *   columnTruncateLength: 232,\n *   numFramesPerSpectrogram: 43,\n *   sampleRateHz:44100,\n *   includeSpectrogram: true,\n *   includeWaveform: true\n * });\n * const audioData = await mic.capture();\n * const spectrogramTensor = audioData.spectrogram;\n * spectrogramTensor.print();\n * const waveformTensor = audioData.waveform;\n * waveformTensor.print();\n * mic.stop();\n * ```\n *\n * @param microphoneConfig A `MicrophoneConfig` object that contains\n *     configurations of reading audio data from microphone.\n *\n * @doc {\n *   heading: 'Data',\n *   subheading: 'Creation',\n *   namespace: 'data',\n *   ignoreCI: true\n *  }\n */\nasync function microphone(microphoneConfig) {\n  return _microphone_iterator.MicrophoneIterator.create(microphoneConfig);\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":11,"column":0}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":11,"column":4}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":11,"column":12}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":11,"column":15}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":11,"column":22}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":12,"column":0}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":12,"column":4}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":12,"column":16}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":12,"column":19}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":12,"column":26}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":13,"column":0}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":13,"column":4}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":13,"column":18}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":13,"column":21}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":13,"column":28}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":23,"column":0},"generated":{"line":14,"column":0}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":23,"column":0},"generated":{"line":14,"column":4}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":23,"column":0},"generated":{"line":14,"column":24}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":23,"column":0},"generated":{"line":14,"column":27}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":23,"column":0},"generated":{"line":14,"column":34}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":24,"column":0},"generated":{"line":15,"column":0}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":24,"column":0},"generated":{"line":15,"column":4}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":24,"column":0},"generated":{"line":15,"column":20}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":24,"column":0},"generated":{"line":15,"column":23}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":24,"column":0},"generated":{"line":15,"column":30}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":16,"column":0}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":16,"column":4}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":16,"column":20}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":16,"column":23}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":16,"column":30}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":17,"column":0}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":28,"column":0},"generated":{"line":35,"column":0}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":106,"column":6},"generated":{"line":113,"column":0}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":106,"column":16},"generated":{"line":113,"column":9}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":106,"column":19},"generated":{"line":113,"column":12}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":107,"column":4},"generated":{"line":113,"column":13}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":107,"column":23},"generated":{"line":113,"column":19}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":107,"column":25},"generated":{"line":113,"column":21}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":107,"column":25},"generated":{"line":113,"column":30}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":107,"column":48},"generated":{"line":113,"column":33}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":107,"column":48},"generated":{"line":113,"column":34}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":107,"column":50},"generated":{"line":113,"column":35}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":107,"column":50},"generated":{"line":113,"column":37}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":108,"column":2},"generated":{"line":114,"column":2}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":108,"column":9},"generated":{"line":114,"column":9}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":108,"column":13},"generated":{"line":114,"column":13}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":108,"column":23},"generated":{"line":114,"column":36}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":108,"column":24},"generated":{"line":114,"column":37}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":108,"column":28},"generated":{"line":114,"column":41}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":108,"column":41},"generated":{"line":114,"column":71}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":108,"column":42},"generated":{"line":114,"column":72}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":108,"column":48},"generated":{"line":114,"column":78}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":108,"column":49},"generated":{"line":114,"column":79}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":108,"column":51},"generated":{"line":114,"column":81}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":108,"column":60},"generated":{"line":114,"column":90}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":108,"column":61},"generated":{"line":114,"column":91}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":109,"column":0},"generated":{"line":115,"column":0}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":111,"column":0},"generated":{"line":116,"column":0}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":135,"column":6},"generated":{"line":140,"column":0}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":135,"column":16},"generated":{"line":140,"column":9}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":135,"column":20},"generated":{"line":140,"column":13}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":136,"column":4},"generated":{"line":140,"column":14}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":136,"column":58},"generated":{"line":140,"column":15}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":136,"column":58},"generated":{"line":140,"column":17}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":137,"column":2},"generated":{"line":141,"column":2}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":137,"column":8},"generated":{"line":141,"column":8}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":137,"column":12},"generated":{"line":141,"column":12}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":137,"column":15},"generated":{"line":141,"column":15}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":137,"column":15},"generated":{"line":141,"column":19}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":137,"column":35},"generated":{"line":141,"column":54}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":137,"column":36},"generated":{"line":141,"column":56}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":137,"column":37},"generated":{"line":141,"column":57}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":137,"column":38},"generated":{"line":141,"column":58}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":138,"column":2},"generated":{"line":142,"column":2}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":138,"column":9},"generated":{"line":142,"column":9}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":138,"column":9},"generated":{"line":142,"column":13}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":138,"column":30},"generated":{"line":142,"column":43}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":138,"column":31},"generated":{"line":142,"column":45}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":138,"column":43},"generated":{"line":142,"column":57}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":138,"column":47},"generated":{"line":142,"column":61}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":138,"column":48},"generated":{"line":142,"column":62}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":139,"column":0},"generated":{"line":143,"column":0}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":141,"column":0},"generated":{"line":144,"column":0}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":201,"column":6},"generated":{"line":204,"column":0}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":201,"column":16},"generated":{"line":204,"column":9}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":201,"column":25},"generated":{"line":204,"column":18}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":202,"column":4},"generated":{"line":204,"column":19}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":202,"column":54},"generated":{"line":204,"column":28}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":202,"column":54},"generated":{"line":204,"column":30}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":203,"column":2},"generated":{"line":205,"column":2}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":203,"column":9},"generated":{"line":205,"column":9}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":203,"column":9},"generated":{"line":205,"column":13}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":203,"column":30},"generated":{"line":205,"column":43}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":203,"column":31},"generated":{"line":205,"column":45}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":203,"column":42},"generated":{"line":205,"column":57}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":204,"column":4},"generated":{"line":206,"column":4}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":204,"column":10},"generated":{"line":206,"column":10}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":204,"column":13},"generated":{"line":206,"column":13}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":204,"column":16},"generated":{"line":206,"column":16}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":204,"column":22},"generated":{"line":206,"column":22}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":204,"column":31},"generated":{"line":206,"column":31}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":204,"column":31},"generated":{"line":206,"column":32}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":204,"column":33},"generated":{"line":206,"column":33}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":205,"column":4},"generated":{"line":207,"column":4}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":205,"column":11},"generated":{"line":207,"column":11}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":205,"column":11},"generated":{"line":207,"column":15}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":205,"column":31},"generated":{"line":207,"column":50}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":205,"column":32},"generated":{"line":207,"column":52}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":205,"column":38},"generated":{"line":207,"column":58}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":205,"column":41},"generated":{"line":207,"column":61}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":205,"column":42},"generated":{"line":207,"column":62}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":205,"column":46},"generated":{"line":207,"column":66}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":205,"column":46},"generated":{"line":207,"column":67}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":205,"column":48},"generated":{"line":207,"column":68}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":205,"column":49},"generated":{"line":207,"column":69}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":206,"column":2},"generated":{"line":208,"column":2}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":206,"column":3},"generated":{"line":208,"column":3}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":206,"column":4},"generated":{"line":208,"column":4}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":207,"column":0},"generated":{"line":209,"column":0}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":209,"column":0},"generated":{"line":210,"column":0}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":239,"column":7},"generated":{"line":240,"column":0}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":239,"column":22},"generated":{"line":240,"column":15}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":239,"column":28},"generated":{"line":240,"column":21}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":240,"column":4},"generated":{"line":240,"column":22}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":240,"column":41},"generated":{"line":240,"column":40}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":241,"column":4},"generated":{"line":240,"column":42}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":241,"column":31},"generated":{"line":240,"column":54}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":241,"column":31},"generated":{"line":240,"column":56}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":242,"column":2},"generated":{"line":241,"column":2}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":242,"column":9},"generated":{"line":241,"column":9}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":242,"column":23},"generated":{"line":241,"column":40}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":242,"column":24},"generated":{"line":241,"column":41}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":242,"column":30},"generated":{"line":241,"column":47}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":242,"column":31},"generated":{"line":241,"column":48}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":242,"column":49},"generated":{"line":241,"column":66}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":242,"column":51},"generated":{"line":241,"column":68}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":242,"column":63},"generated":{"line":241,"column":80}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":242,"column":64},"generated":{"line":241,"column":81}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":243,"column":0},"generated":{"line":242,"column":0}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":245,"column":0},"generated":{"line":243,"column":0}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":279,"column":7},"generated":{"line":277,"column":0}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":279,"column":22},"generated":{"line":277,"column":15}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":279,"column":32},"generated":{"line":277,"column":25}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":279,"column":33},"generated":{"line":277,"column":26}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":279,"column":68},"generated":{"line":277,"column":42}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":279,"column":68},"generated":{"line":277,"column":44}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":281,"column":2},"generated":{"line":278,"column":2}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":281,"column":9},"generated":{"line":278,"column":9}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":281,"column":27},"generated":{"line":278,"column":48}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":281,"column":28},"generated":{"line":278,"column":49}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":281,"column":34},"generated":{"line":278,"column":55}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":281,"column":35},"generated":{"line":278,"column":56}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":281,"column":51},"generated":{"line":278,"column":72}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":281,"column":52},"generated":{"line":278,"column":73}},{"source":"../../../../../tfjs-data/src/readers.ts","name":null,"original":{"line":282,"column":0},"generated":{"line":279,"column":0}}],"sources":{"../../../../../tfjs-data/src/readers.ts":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport {TensorContainer} from '@tensorflow/tfjs-core';\nimport {Dataset, datasetFromIteratorFn} from './dataset';\nimport {CSVDataset} from './datasets/csv_dataset';\nimport {iteratorFromFunction} from './iterators/lazy_iterator';\nimport {MicrophoneIterator} from './iterators/microphone_iterator';\nimport {WebcamIterator} from './iterators/webcam_iterator';\nimport {URLDataSource} from './sources/url_data_source';\nimport {CSVConfig, MicrophoneConfig, WebcamConfig} from './types';\n\n/**\n * Create a `CSVDataset` by reading and decoding CSV file(s) from provided URL\n * or local path if it's in Node environment.\n *\n * Note: If isLabel in columnConfigs is `true` for at least one column, the\n * element in returned `CSVDataset` will be an object of\n * `{xs:features, ys:labels}`: xs is a dict of features key/value pairs, ys\n * is a dict of labels key/value pairs. If no column is marked as label,\n * returns a dict of features only.\n *\n * ```js\n * const csvUrl =\n * 'https://storage.googleapis.com/tfjs-examples/multivariate-linear-regression/data/boston-housing-train.csv';\n *\n * async function run() {\n *   // We want to predict the column \"medv\", which represents a median value of\n *   // a home (in $1000s), so we mark it as a label.\n *   const csvDataset = tf.data.csv(\n *     csvUrl, {\n *       columnConfigs: {\n *         medv: {\n *           isLabel: true\n *         }\n *       }\n *     });\n *\n *   // Number of features is the number of column names minus one for the label\n *   // column.\n *   const numOfFeatures = (await csvDataset.columnNames()).length - 1;\n *\n *   // Prepare the Dataset for training.\n *   const flattenedDataset =\n *     csvDataset\n *     .map(({xs, ys}) =>\n *       {\n *         // Convert xs(features) and ys(labels) from object form (keyed by\n *         // column name) to array form.\n *         return {xs:Object.values(xs), ys:Object.values(ys)};\n *       })\n *     .batch(10);\n *\n *   // Define the model.\n *   const model = tf.sequential();\n *   model.add(tf.layers.dense({\n *     inputShape: [numOfFeatures],\n *     units: 1\n *   }));\n *   model.compile({\n *     optimizer: tf.train.sgd(0.000001),\n *     loss: 'meanSquaredError'\n *   });\n *\n *   // Fit the model using the prepared Dataset\n *   return model.fitDataset(flattenedDataset, {\n *     epochs: 10,\n *     callbacks: {\n *       onEpochEnd: async (epoch, logs) => {\n *         console.log(epoch + ':' + logs.loss);\n *       }\n *     }\n *   });\n * }\n *\n * await run();\n * ```\n *\n * @param source URL or local path to get CSV file. If it's a local path, it\n * must have prefix `file://` and it only works in node environment.\n * @param csvConfig (Optional) A CSVConfig object that contains configurations\n *     of reading and decoding from CSV file(s).\n *\n * @doc {\n *   heading: 'Data',\n *   subheading: 'Creation',\n *   namespace: 'data',\n *   configParamIndices: [1]\n *  }\n */\nexport function csv(\n    source: RequestInfo, csvConfig: CSVConfig = {}): CSVDataset {\n  return new CSVDataset(new URLDataSource(source), csvConfig);\n}\n\n/**\n * Create a `Dataset` that produces each element by calling a provided function.\n *\n * Note that repeated iterations over this `Dataset` may produce different\n * results, because the function will be called anew for each element of each\n * iteration.\n *\n * Also, beware that the sequence of calls to this function may be out of order\n * in time with respect to the logical order of the Dataset. This is due to the\n * asynchronous lazy nature of stream processing, and depends on downstream\n * transformations (e.g. .shuffle()). If the provided function is pure, this is\n * no problem, but if it is a closure over a mutable state (e.g., a traversal\n * pointer), then the order of the produced elements may be scrambled.\n *\n * ```js\n * let i = -1;\n * const func = () =>\n *    ++i < 5 ? {value: i, done: false} : {value: null, done: true};\n * const ds = tf.data.func(func);\n * await ds.forEachAsync(e => console.log(e));\n * ```\n *\n * @param f A function that produces one data element on each call.\n */\nexport function func<T extends TensorContainer>(\n    f: () => IteratorResult<T>| Promise<IteratorResult<T>>): Dataset<T> {\n  const iter = iteratorFromFunction(f);\n  return datasetFromIteratorFn(async () => iter);\n}\n\n/**\n * Create a `Dataset` that produces each element from provided JavaScript\n * generator, which is a function*\n * (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Generator_functions),\n * or a function that returns an\n * iterator\n * (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Generator_functions).\n *\n * The returned iterator should have `.next()` function that returns element in\n * format of `{value: TensorContainer, done:boolean}`.\n *\n * Example of creating a dataset from an iterator factory:\n * ```js\n * function makeIterator() {\n *   const numElements = 10;\n *   let index = 0;\n *\n *   const iterator = {\n *     next: () => {\n *       let result;\n *       if (index < numElements) {\n *         result = {value: index, done: false};\n *         index++;\n *         return result;\n *       }\n *       return {value: index, done: true};\n *     }\n *   };\n *   return iterator;\n * }\n * const ds = tf.data.generator(makeIterator);\n * await ds.forEachAsync(e => console.log(e));\n * ```\n *\n * Example of creating a dataset from a generator:\n * ```js\n * function* dataGenerator() {\n *   const numElements = 10;\n *   let index = 0;\n *   while (index < numElements) {\n *     const x = index;\n *     index++;\n *     yield x;\n *   }\n * }\n *\n * const ds = tf.data.generator(dataGenerator);\n * await ds.forEachAsync(e => console.log(e));\n * ```\n *\n * @param generator A JavaScript generator function that returns a JavaScript\n *     iterator.\n *\n * @doc {\n *   heading: 'Data',\n *   subheading: 'Creation',\n *   namespace: 'data',\n *   configParamIndices: [1]\n *  }\n */\nexport function generator<T extends TensorContainer>(\n    generator: () => Iterator<T>| Promise<Iterator<T>>): Dataset<T> {\n  return datasetFromIteratorFn(async () => {\n    const gen = await generator();\n    return iteratorFromFunction(() => gen.next());\n  });\n}\n\n/**\n * Create an iterator that generates `Tensor`s from webcam video stream. This\n * API only works in Browser environment when the device has webcam.\n *\n * Note: this code snippet only works when the device has a webcam. It will\n * request permission to open the webcam when running.\n * ```js\n * const videoElement = document.createElement('video');\n * videoElement.width = 100;\n * videoElement.height = 100;\n * const cam = await tf.data.webcam(videoElement);\n * const img = await cam.capture();\n * img.print();\n * cam.stop();\n * ```\n *\n * @param webcamVideoElement A `HTMLVideoElement` used to play video from\n *     webcam. If this element is not provided, a hidden `HTMLVideoElement` will\n *     be created. In that case, `resizeWidth` and `resizeHeight` must be\n *     provided to set the generated tensor shape.\n * @param webcamConfig A `WebcamConfig` object that contains configurations of\n *     reading and manipulating data from webcam video stream.\n *\n * @doc {\n *   heading: 'Data',\n *   subheading: 'Creation',\n *   namespace: 'data',\n *   ignoreCI: true\n *  }\n */\nexport async function webcam(\n    webcamVideoElement?: HTMLVideoElement,\n    webcamConfig?: WebcamConfig): Promise<WebcamIterator> {\n  return WebcamIterator.create(webcamVideoElement, webcamConfig);\n}\n\n/**\n * Create an iterator that generates frequency-domain spectrogram `Tensor`s from\n * microphone audio stream with browser's native FFT. This API only works in\n * browser environment when the device has microphone.\n *\n * Note: this code snippet only works when the device has a microphone. It will\n * request permission to open the microphone when running.\n * ```js\n * const mic = await tf.data.microphone({\n *   fftSize: 1024,\n *   columnTruncateLength: 232,\n *   numFramesPerSpectrogram: 43,\n *   sampleRateHz:44100,\n *   includeSpectrogram: true,\n *   includeWaveform: true\n * });\n * const audioData = await mic.capture();\n * const spectrogramTensor = audioData.spectrogram;\n * spectrogramTensor.print();\n * const waveformTensor = audioData.waveform;\n * waveformTensor.print();\n * mic.stop();\n * ```\n *\n * @param microphoneConfig A `MicrophoneConfig` object that contains\n *     configurations of reading audio data from microphone.\n *\n * @doc {\n *   heading: 'Data',\n *   subheading: 'Creation',\n *   namespace: 'data',\n *   ignoreCI: true\n *  }\n */\nexport async function microphone(microphoneConfig?: MicrophoneConfig):\n    Promise<MicrophoneIterator> {\n  return MicrophoneIterator.create(microphoneConfig);\n}\n"},"lineCount":null}},"error":null,"hash":"1d0b2941ade389b6cb3b06c2deadc49c","cacheData":{"env":{}}}