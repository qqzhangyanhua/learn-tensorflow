{"id":"node_modules/@tensorflow/tfjs-layers/dist/exports.js","dependencies":[{"name":"/Users/zhangyanhua/Desktop/test/js-tensorFlow/package.json","includedInParent":true,"mtime":1703412791966},{"name":"/Users/zhangyanhua/Desktop/test/js-tensorFlow/node_modules/@tensorflow/tfjs-layers/package.json","includedInParent":true,"mtime":1703260297658},{"name":"./base_callbacks","loc":{"line":13,"column":44,"index":358},"parent":"/Users/zhangyanhua/Desktop/test/js-tensorFlow/node_modules/@tensorflow/tfjs-layers/dist/exports.js","resolved":"/Users/zhangyanhua/Desktop/test/js-tensorFlow/node_modules/@tensorflow/tfjs-layers/dist/base_callbacks.js"},{"name":"./engine/input_layer","loc":{"line":14,"column":23,"index":401},"parent":"/Users/zhangyanhua/Desktop/test/js-tensorFlow/node_modules/@tensorflow/tfjs-layers/dist/exports.js","resolved":"/Users/zhangyanhua/Desktop/test/js-tensorFlow/node_modules/@tensorflow/tfjs-layers/dist/engine/input_layer.js"},{"name":"./engine/training","loc":{"line":15,"column":28,"index":453},"parent":"/Users/zhangyanhua/Desktop/test/js-tensorFlow/node_modules/@tensorflow/tfjs-layers/dist/exports.js","resolved":"/Users/zhangyanhua/Desktop/test/js-tensorFlow/node_modules/@tensorflow/tfjs-layers/dist/engine/training.js"},{"name":"./models","loc":{"line":17,"column":32,"index":545},"parent":"/Users/zhangyanhua/Desktop/test/js-tensorFlow/node_modules/@tensorflow/tfjs-layers/dist/exports.js","resolved":"/Users/zhangyanhua/Desktop/test/js-tensorFlow/node_modules/@tensorflow/tfjs-layers/dist/models.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.input = input;\nObject.defineProperty(exports, \"loadLayersModel\", {\n  enumerable: true,\n  get: function () {\n    return _models.loadLayersModel;\n  }\n});\nexports.model = model;\nexports.registerCallbackConstructor = registerCallbackConstructor;\nexports.sequential = sequential;\nvar _base_callbacks = require(\"./base_callbacks\");\nvar _input_layer = require(\"./engine/input_layer\");\nvar _training = require(\"./engine/training\");\nvar _models = require(\"./models\");\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Exported functions.\n */\n\n// TODO(cais): Add doc string to all the public static functions in this\n//   class; include exectuable JavaScript code snippets where applicable\n//   (b/74074458).\n// LayersModel and related factory methods.\n/**\n * A model is a data structure that consists of `Layers` and defines inputs\n * and outputs.\n *\n * The key difference between `tf.model` and `tf.sequential` is that\n * `tf.model` is more generic, supporting an arbitrary graph (without\n * cycles) of layers. `tf.sequential` is less generic and supports only a linear\n * stack of layers.\n *\n * When creating a `tf.LayersModel`, specify its input(s) and output(s). Layers\n * are used to wire input(s) to output(s).\n *\n * For example, the following code snippet defines a model consisting of\n * two `dense` layers, with 10 and 4 units, respectively.\n *\n * ```js\n * // Define input, which has a size of 5 (not including batch dimension).\n * const input = tf.input({shape: [5]});\n *\n * // First dense layer uses relu activation.\n * const denseLayer1 = tf.layers.dense({units: 10, activation: 'relu'});\n * // Second dense layer uses softmax activation.\n * const denseLayer2 = tf.layers.dense({units: 4, activation: 'softmax'});\n *\n * // Obtain the output symbolic tensor by applying the layers on the input.\n * const output = denseLayer2.apply(denseLayer1.apply(input));\n *\n * // Create the model based on the inputs.\n * const model = tf.model({inputs: input, outputs: output});\n *\n * // The model can be used for training, evaluation and prediction.\n * // For example, the following line runs prediction with the model on\n * // some fake data.\n * model.predict(tf.ones([2, 5])).print();\n * ```\n * See also:\n *   `tf.sequential`, `tf.loadLayersModel`.\n *\n * @doc {heading: 'Models', subheading: 'Creation'}\n */\nfunction model(args) {\n  return new _training.LayersModel(args);\n}\n/**\n * Creates a `tf.Sequential` model.  A sequential model is any model where the\n * outputs of one layer are the inputs to the next layer, i.e. the model\n * topology is a simple 'stack' of layers, with no branching or skipping.\n *\n * This means that the first layer passed to a `tf.Sequential` model should have\n * a defined input shape. What that means is that it should have received an\n * `inputShape` or `batchInputShape` argument, or for some type of layers\n * (recurrent, Dense...) an `inputDim` argument.\n *\n * The key difference between `tf.model` and `tf.sequential` is that\n * `tf.sequential` is less generic, supporting only a linear stack of layers.\n * `tf.model` is more generic and supports an arbitrary graph (without\n * cycles) of layers.\n *\n * Examples:\n *\n * ```js\n * const model = tf.sequential();\n *\n * // First layer must have an input shape defined.\n * model.add(tf.layers.dense({units: 32, inputShape: [50]}));\n * // Afterwards, TF.js does automatic shape inference.\n * model.add(tf.layers.dense({units: 4}));\n *\n * // Inspect the inferred shape of the model's output, which equals\n * // `[null, 4]`. The 1st dimension is the undetermined batch dimension; the\n * // 2nd is the output size of the model's last layer.\n * console.log(JSON.stringify(model.outputs[0].shape));\n * ```\n *\n * It is also possible to specify a batch size (with potentially undetermined\n * batch dimension, denoted by \"null\") for the first layer using the\n * `batchInputShape` key. The following example is equivalent to the above:\n *\n * ```js\n * const model = tf.sequential();\n *\n * // First layer must have a defined input shape\n * model.add(tf.layers.dense({units: 32, batchInputShape: [null, 50]}));\n * // Afterwards, TF.js does automatic shape inference.\n * model.add(tf.layers.dense({units: 4}));\n *\n * // Inspect the inferred shape of the model's output.\n * console.log(JSON.stringify(model.outputs[0].shape));\n * ```\n *\n * You can also use an `Array` of already-constructed `Layer`s to create\n * a `tf.Sequential` model:\n *\n * ```js\n * const model = tf.sequential({\n *   layers: [tf.layers.dense({units: 32, inputShape: [50]}),\n *            tf.layers.dense({units: 4})]\n * });\n * console.log(JSON.stringify(model.outputs[0].shape));\n * ```\n *\n * @doc {heading: 'Models', subheading: 'Creation'}\n */\nfunction sequential(config) {\n  return new _models.Sequential(config);\n}\n/**\n * Used to instantiate an input to a model as a `tf.SymbolicTensor`.\n *\n * Users should call the `input` factory function for\n * consistency with other generator functions.\n *\n * Example:\n *\n * ```js\n * // Defines a simple logistic regression model with 32 dimensional input\n * // and 3 dimensional output.\n * const x = tf.input({shape: [32]});\n * const y = tf.layers.dense({units: 3, activation: 'softmax'}).apply(x);\n * const model = tf.model({inputs: x, outputs: y});\n * model.predict(tf.ones([2, 32])).print();\n * ```\n *\n * Note: `input` is only necessary when using `model`. When using\n * `sequential`, specify `inputShape` for the first layer or use `inputLayer`\n * as the first layer.\n *\n * @doc {heading: 'Models', subheading: 'Inputs'}\n */\nfunction input(config) {\n  return (0, _input_layer.Input)(config);\n}\nfunction registerCallbackConstructor(verbosityLevel, callbackConstructor) {\n  _base_callbacks.CallbackConstructorRegistry.registerCallbackConstructor(verbosityLevel, callbackConstructor);\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":15,"column":0},"generated":{"line":16,"column":4}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":15,"column":0},"generated":{"line":16,"column":19}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":15,"column":0},"generated":{"line":16,"column":22}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":15,"column":0},"generated":{"line":16,"column":29}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":17,"column":0},"generated":{"line":17,"column":4}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":17,"column":0},"generated":{"line":17,"column":16}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":17,"column":0},"generated":{"line":17,"column":19}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":17,"column":0},"generated":{"line":17,"column":26}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":19,"column":0},"generated":{"line":18,"column":0}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":19,"column":0},"generated":{"line":18,"column":4}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":19,"column":0},"generated":{"line":18,"column":13}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":19,"column":0},"generated":{"line":18,"column":16}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":19,"column":0},"generated":{"line":18,"column":23}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":19,"column":0}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":19,"column":4}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":19,"column":11}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":19,"column":14}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":19,"column":21}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":20,"column":0}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":11,"column":0},"generated":{"line":29,"column":0}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":24,"column":0},"generated":{"line":33,"column":0}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":34,"column":0}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":26,"column":0},"generated":{"line":35,"column":0}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":28,"column":0},"generated":{"line":36,"column":0}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":30,"column":0},"generated":{"line":37,"column":0}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":70,"column":6},"generated":{"line":77,"column":0}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":70,"column":16},"generated":{"line":77,"column":9}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":70,"column":21},"generated":{"line":77,"column":14}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":70,"column":22},"generated":{"line":77,"column":15}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":70,"column":41},"generated":{"line":77,"column":19}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":70,"column":41},"generated":{"line":77,"column":21}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":71,"column":2},"generated":{"line":78,"column":2}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":71,"column":9},"generated":{"line":78,"column":9}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":71,"column":13},"generated":{"line":78,"column":13}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":71,"column":24},"generated":{"line":78,"column":34}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":71,"column":25},"generated":{"line":78,"column":35}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":71,"column":29},"generated":{"line":78,"column":39}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":71,"column":30},"generated":{"line":78,"column":40}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":72,"column":0},"generated":{"line":79,"column":0}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":74,"column":0},"generated":{"line":80,"column":0}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":134,"column":6},"generated":{"line":140,"column":0}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":134,"column":16},"generated":{"line":140,"column":9}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":134,"column":26},"generated":{"line":140,"column":19}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":134,"column":27},"generated":{"line":140,"column":20}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":134,"column":50},"generated":{"line":140,"column":26}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":134,"column":50},"generated":{"line":140,"column":28}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":135,"column":2},"generated":{"line":141,"column":2}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":135,"column":9},"generated":{"line":141,"column":9}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":135,"column":13},"generated":{"line":141,"column":13}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":135,"column":23},"generated":{"line":141,"column":31}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":135,"column":24},"generated":{"line":141,"column":32}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":135,"column":30},"generated":{"line":141,"column":38}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":135,"column":31},"generated":{"line":141,"column":39}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":136,"column":0},"generated":{"line":142,"column":0}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":138,"column":0},"generated":{"line":143,"column":0}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":161,"column":6},"generated":{"line":166,"column":0}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":161,"column":16},"generated":{"line":166,"column":9}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":161,"column":21},"generated":{"line":166,"column":14}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":161,"column":22},"generated":{"line":166,"column":15}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":161,"column":41},"generated":{"line":166,"column":21}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":161,"column":41},"generated":{"line":166,"column":23}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":162,"column":2},"generated":{"line":167,"column":2}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":162,"column":9},"generated":{"line":167,"column":9}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":162,"column":9},"generated":{"line":167,"column":13}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":162,"column":14},"generated":{"line":167,"column":31}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":162,"column":15},"generated":{"line":167,"column":33}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":162,"column":21},"generated":{"line":167,"column":39}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":162,"column":22},"generated":{"line":167,"column":40}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":163,"column":0},"generated":{"line":168,"column":0}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":165,"column":6},"generated":{"line":169,"column":0}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":165,"column":16},"generated":{"line":169,"column":9}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":165,"column":43},"generated":{"line":169,"column":36}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":166,"column":4},"generated":{"line":169,"column":37}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":166,"column":26},"generated":{"line":169,"column":51}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":167,"column":4},"generated":{"line":169,"column":53}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":167,"column":48},"generated":{"line":169,"column":72}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":167,"column":48},"generated":{"line":169,"column":74}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":168,"column":2},"generated":{"line":170,"column":2}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":168,"column":29},"generated":{"line":170,"column":45}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":168,"column":30},"generated":{"line":170,"column":46}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":168,"column":57},"generated":{"line":170,"column":73}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":169,"column":6},"generated":{"line":170,"column":74}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":169,"column":20},"generated":{"line":170,"column":88}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":169,"column":22},"generated":{"line":170,"column":90}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":169,"column":41},"generated":{"line":170,"column":109}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":169,"column":42},"generated":{"line":170,"column":110}},{"source":"../../../../../tfjs-layers/src/exports.ts","name":null,"original":{"line":170,"column":0},"generated":{"line":171,"column":0}}],"sources":{"../../../../../tfjs-layers/src/exports.ts":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Exported functions.\n */\n\nimport {BaseCallbackConstructor, CallbackConstructorRegistry} from './base_callbacks';\nimport {ContainerArgs} from './engine/container';\nimport {Input, InputConfig,} from './engine/input_layer';\nimport {SymbolicTensor} from './engine/topology';\nimport {LayersModel} from './engine/training';\nimport {Sequential, SequentialArgs} from './models';\n\nexport {loadLayersModel} from './models';\n\n// TODO(cais): Add doc string to all the public static functions in this\n//   class; include exectuable JavaScript code snippets where applicable\n//   (b/74074458).\n\n// LayersModel and related factory methods.\n\n/**\n * A model is a data structure that consists of `Layers` and defines inputs\n * and outputs.\n *\n * The key difference between `tf.model` and `tf.sequential` is that\n * `tf.model` is more generic, supporting an arbitrary graph (without\n * cycles) of layers. `tf.sequential` is less generic and supports only a linear\n * stack of layers.\n *\n * When creating a `tf.LayersModel`, specify its input(s) and output(s). Layers\n * are used to wire input(s) to output(s).\n *\n * For example, the following code snippet defines a model consisting of\n * two `dense` layers, with 10 and 4 units, respectively.\n *\n * ```js\n * // Define input, which has a size of 5 (not including batch dimension).\n * const input = tf.input({shape: [5]});\n *\n * // First dense layer uses relu activation.\n * const denseLayer1 = tf.layers.dense({units: 10, activation: 'relu'});\n * // Second dense layer uses softmax activation.\n * const denseLayer2 = tf.layers.dense({units: 4, activation: 'softmax'});\n *\n * // Obtain the output symbolic tensor by applying the layers on the input.\n * const output = denseLayer2.apply(denseLayer1.apply(input));\n *\n * // Create the model based on the inputs.\n * const model = tf.model({inputs: input, outputs: output});\n *\n * // The model can be used for training, evaluation and prediction.\n * // For example, the following line runs prediction with the model on\n * // some fake data.\n * model.predict(tf.ones([2, 5])).print();\n * ```\n * See also:\n *   `tf.sequential`, `tf.loadLayersModel`.\n *\n * @doc {heading: 'Models', subheading: 'Creation'}\n */\nexport function model(args: ContainerArgs): LayersModel {\n  return new LayersModel(args);\n}\n\n/**\n * Creates a `tf.Sequential` model.  A sequential model is any model where the\n * outputs of one layer are the inputs to the next layer, i.e. the model\n * topology is a simple 'stack' of layers, with no branching or skipping.\n *\n * This means that the first layer passed to a `tf.Sequential` model should have\n * a defined input shape. What that means is that it should have received an\n * `inputShape` or `batchInputShape` argument, or for some type of layers\n * (recurrent, Dense...) an `inputDim` argument.\n *\n * The key difference between `tf.model` and `tf.sequential` is that\n * `tf.sequential` is less generic, supporting only a linear stack of layers.\n * `tf.model` is more generic and supports an arbitrary graph (without\n * cycles) of layers.\n *\n * Examples:\n *\n * ```js\n * const model = tf.sequential();\n *\n * // First layer must have an input shape defined.\n * model.add(tf.layers.dense({units: 32, inputShape: [50]}));\n * // Afterwards, TF.js does automatic shape inference.\n * model.add(tf.layers.dense({units: 4}));\n *\n * // Inspect the inferred shape of the model's output, which equals\n * // `[null, 4]`. The 1st dimension is the undetermined batch dimension; the\n * // 2nd is the output size of the model's last layer.\n * console.log(JSON.stringify(model.outputs[0].shape));\n * ```\n *\n * It is also possible to specify a batch size (with potentially undetermined\n * batch dimension, denoted by \"null\") for the first layer using the\n * `batchInputShape` key. The following example is equivalent to the above:\n *\n * ```js\n * const model = tf.sequential();\n *\n * // First layer must have a defined input shape\n * model.add(tf.layers.dense({units: 32, batchInputShape: [null, 50]}));\n * // Afterwards, TF.js does automatic shape inference.\n * model.add(tf.layers.dense({units: 4}));\n *\n * // Inspect the inferred shape of the model's output.\n * console.log(JSON.stringify(model.outputs[0].shape));\n * ```\n *\n * You can also use an `Array` of already-constructed `Layer`s to create\n * a `tf.Sequential` model:\n *\n * ```js\n * const model = tf.sequential({\n *   layers: [tf.layers.dense({units: 32, inputShape: [50]}),\n *            tf.layers.dense({units: 4})]\n * });\n * console.log(JSON.stringify(model.outputs[0].shape));\n * ```\n *\n * @doc {heading: 'Models', subheading: 'Creation'}\n */\nexport function sequential(config?: SequentialArgs): Sequential {\n  return new Sequential(config);\n}\n\n/**\n * Used to instantiate an input to a model as a `tf.SymbolicTensor`.\n *\n * Users should call the `input` factory function for\n * consistency with other generator functions.\n *\n * Example:\n *\n * ```js\n * // Defines a simple logistic regression model with 32 dimensional input\n * // and 3 dimensional output.\n * const x = tf.input({shape: [32]});\n * const y = tf.layers.dense({units: 3, activation: 'softmax'}).apply(x);\n * const model = tf.model({inputs: x, outputs: y});\n * model.predict(tf.ones([2, 32])).print();\n * ```\n *\n * Note: `input` is only necessary when using `model`. When using\n * `sequential`, specify `inputShape` for the first layer or use `inputLayer`\n * as the first layer.\n *\n * @doc {heading: 'Models', subheading: 'Inputs'}\n */\nexport function input(config: InputConfig): SymbolicTensor {\n  return Input(config);\n}\n\nexport function registerCallbackConstructor(\n    verbosityLevel: number,\n    callbackConstructor: BaseCallbackConstructor): void {\n  CallbackConstructorRegistry.registerCallbackConstructor(\n      verbosityLevel, callbackConstructor);\n}\n"},"lineCount":null}},"error":null,"hash":"a6c88582bff3d295dc47e47a85b4c245","cacheData":{"env":{}}}